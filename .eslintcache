[{"/home/vlaki/Projects/react-crud-axios/src/index.js":"1","/home/vlaki/Projects/react-crud-axios/src/components/App.js":"2","/home/vlaki/Projects/react-crud-axios/src/components/AddContact.js":"3","/home/vlaki/Projects/react-crud-axios/src/components/Header.js":"4","/home/vlaki/Projects/react-crud-axios/src/components/ContactList.js":"5","/home/vlaki/Projects/react-crud-axios/src/components/ContactDetail.js":"6","/home/vlaki/Projects/react-crud-axios/src/components/EditContact.js":"7","/home/vlaki/Projects/react-crud-axios/src/api/contacts.js":"8","/home/vlaki/Projects/react-crud-axios/src/components/ContactCard.js":"9"},{"size":208,"mtime":1612461694000,"results":"10","hashOfConfig":"11"},{"size":3538,"mtime":1616085750645,"results":"12","hashOfConfig":"11"},{"size":1850,"mtime":1616084627136,"results":"13","hashOfConfig":"11"},{"size":231,"mtime":1612461694000,"results":"14","hashOfConfig":"11"},{"size":1313,"mtime":1616084814155,"results":"15","hashOfConfig":"11"},{"size":769,"mtime":1612461694000,"results":"16","hashOfConfig":"11"},{"size":1914,"mtime":1616084762798,"results":"17","hashOfConfig":"11"},{"size":127,"mtime":1612958736587,"results":"18","hashOfConfig":"11"},{"size":985,"mtime":1616085952352,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1cgcdb4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/vlaki/Projects/react-crud-axios/src/index.js",[],["40","41"],"/home/vlaki/Projects/react-crud-axios/src/components/App.js",["42","43","44","45","46","47"],"import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { uuid } from \"uuidv4\";\nimport api from \"../api/contacts\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\nimport ContactDetail from \"./ContactDetail\";\nimport EditContact from \"./EditContact\";\n\nfunction App() {\n  const LOCAL_STORAGE_KEY = \"contacts\";\n  const [contacts, setContacts] = useState([]);\n\n  //RetrieveContacts\n  const retrieveContacts = async () => {\n    const response = await api.get(\"/contacts.json\").catch(error => {alert(error)});\n    //console.log(response.data,'response456');\n    let data = response.data;\n    let contacts = [];\n    Object.keys(data).map((contact) =>{\n      //console.log(data[contact],'contact123');\n      const newContct = {\n        id: contact,\n        email: data[contact].email,\n        name: data[contact].name, \n      }\n      contacts.push(newContct);\n    });\n    return contacts;\n    //return response.data;\n  };\n\n  const addContactHandler = async (contact) => {\n    console.log(contact);\n    const request = {\n      ...contact,\n    };\n\n    const response = await api.post(\"/contacts.json\", request);\n    //console.log(request,'addcontact');\n    //const allContacts = await retrieveContacts();\n    const requestContact = {\n      id: response.data.name,\n      ...contact,\n    }\n    console.log(requestContact, 'requestContact45');\n    setContacts([...contacts, requestContact]);\n  };\n\n  const updateContactHandler = async (contact) => {\n    const response = await api.put(`/contacts/${contact.id}.json`, contact);\n    //console.log(response,'response123');\n    const { id, localID, email, name } = response.data;\n    setContacts(\n      contacts.map((contact) => {\n        \n        return contact.id === id ? { ...response.data } : contact;\n      })\n    );\n  };\n\n  const removeContactHandler = async (id) => {\n    await api.delete(`/contacts/${id}.json`);\n    const newContactList = contacts.filter((contact) => {\n      return contact.id !== id;\n    });\n\n    setContacts(newContactList);\n  };\n\n  useEffect(() => {\n    // const retriveContacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    // if (retriveContacts) setContacts(retriveContacts);\n    const getAllCOntacts = async () => {\n      const allContacts = await retrieveContacts();\n      if (allContacts) setContacts(allContacts);\n    };\n\n    getAllCOntacts();\n  }, []);\n\n  useEffect(() => {\n    //localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  return (\n    <div className=\"ui container\">\n      <Router>\n        <Header />\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={(props) => (\n              <ContactList\n                {...props}\n                contacts={contacts}\n                getContactId={removeContactHandler}\n              />\n            )}\n          />\n          <Route\n            path=\"/add\"\n            render={(props) => (\n              <AddContact {...props} addContactHandler={addContactHandler} />\n            )}\n          />\n\n          <Route\n            path=\"/edit\"\n            render={(props) => (\n              <EditContact\n                {...props}\n                updateContactHandler={updateContactHandler}\n              />\n            )}\n          />\n\n          <Route path=\"/contact/:id\" component={ContactDetail} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/vlaki/Projects/react-crud-axios/src/components/AddContact.js",[],"/home/vlaki/Projects/react-crud-axios/src/components/Header.js",[],"/home/vlaki/Projects/react-crud-axios/src/components/ContactList.js",[],"/home/vlaki/Projects/react-crud-axios/src/components/ContactDetail.js",[],"/home/vlaki/Projects/react-crud-axios/src/components/EditContact.js",[],"/home/vlaki/Projects/react-crud-axios/src/api/contacts.js",[],"/home/vlaki/Projects/react-crud-axios/src/components/ContactCard.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":3,"column":10,"nodeType":"54","messageId":"55","endLine":3,"endColumn":14},{"ruleId":"52","severity":1,"message":"56","line":13,"column":9,"nodeType":"54","messageId":"55","endLine":13,"endColumn":26},{"ruleId":"57","severity":1,"message":"58","line":22,"column":37,"nodeType":"59","messageId":"60","endLine":22,"endColumn":39},{"ruleId":"52","severity":1,"message":"61","line":55,"column":17,"nodeType":"54","messageId":"55","endLine":55,"endColumn":24},{"ruleId":"52","severity":1,"message":"62","line":55,"column":26,"nodeType":"54","messageId":"55","endLine":55,"endColumn":31},{"ruleId":"52","severity":1,"message":"63","line":55,"column":33,"nodeType":"54","messageId":"55","endLine":55,"endColumn":37},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'uuid' is defined but never used.","Identifier","unusedVar","'LOCAL_STORAGE_KEY' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'localID' is assigned a value but never used.","'email' is assigned a value but never used.","'name' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]